{"worker":"/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n// @ts-ignore\r\nself.importScripts(['https://cdnjs.cloudflare.com/ajax/libs/typescript/4.6.4/typescript.min.js']);\r\nvar Typescript = self.ts;\n\nvar JsxToken = {\r\n    angleBracket: 'jsx-tag-angle-bracket',\r\n    attributeKey: 'jsx-tag-attribute-key',\r\n    tagName: 'jsx-tag-name',\r\n    expressionBraces: 'jsx-expression-braces',\r\n    text: 'jsx-text'\r\n};\n\n/**\r\n * 获取对应下标所处行列数据\r\n * @param {*} index 索引下标(以1开始)\r\n * @param {*} lines 每行长度数据\r\n * @returns\r\n */\r\nvar getRowAndColumn = function (index, lines) {\r\n    var line = 0;\r\n    var offset = 0;\r\n    while (offset + lines[line] < index) {\r\n        offset += lines[line];\r\n        line += 1;\r\n    }\r\n    return { row: line + 1, column: index - offset };\r\n};\r\n/**\r\n * 获取节点位置\r\n * @param {} node 节点\r\n * @returns\r\n */\r\nvar getNodeRange = function (node) {\r\n    if (typeof node.getStart === 'function' && typeof node.getEnd === 'function') {\r\n        return [node.getStart(), node.getEnd()];\r\n    }\r\n    else if (typeof node.pos !== 'undefined' && typeof node.end !== 'undefined') {\r\n        return [node.pos, node.end];\r\n    }\r\n    return [0, 0];\r\n};\r\n// 计算开始结束行列位置\r\nvar calcPosition = function (node, lines) {\r\n    var _a = getNodeRange(node), start = _a[0], end = _a[1];\r\n    return {\r\n        indexes: [start, end],\r\n        positions: [getRowAndColumn(start + 1, lines), getRowAndColumn(end, lines)]\r\n    };\r\n};\n\n/**\r\n * 处理 jsx element 或者 fragment\r\n * @param {*} data\r\n */\r\nvar disposeJsxElementOrFragment = function (data) {\r\n    var node = data.node, lines = data.lines, classifications = data.classifications;\r\n    var config = data.config;\r\n    var context = data.context;\r\n    var orderToken = \"jsx-tag-order-\".concat(context.jsxTagOrder);\r\n    context.jsxTagOrder = (context.jsxTagOrder + 1) > config.jsxTagCycle ? 1 : (context.jsxTagOrder + 1);\r\n    // em <div />\r\n    if (node.kind === Typescript.SyntaxKind.JsxSelfClosingElement) {\r\n        var positions = calcPosition(node, lines).positions;\r\n        var tagNamePositions = calcPosition(node.tagName, lines).positions;\r\n        // <div /> => \"<\"\r\n        classifications.push({\r\n            start: positions[0],\r\n            end: positions[0],\r\n            tokens: [JsxToken.angleBracket, orderToken]\r\n        });\r\n        // <div /> => \"/>\"\r\n        classifications.push({\r\n            start: __assign(__assign({}, positions[1]), { column: positions[1].column - 1 }),\r\n            end: positions[1],\r\n            tokens: [JsxToken.angleBracket, orderToken]\r\n        });\r\n        // <div /> => \"div\"\r\n        classifications.push({\r\n            start: tagNamePositions[0],\r\n            end: tagNamePositions[1],\r\n            tokens: [JsxToken.tagName, orderToken]\r\n        });\r\n    }\r\n    else {\r\n        var openingNode = node.kind === Typescript.SyntaxKind.JsxFragment ? node.openingFragment : node.openingElement;\r\n        var closingNode = node.kind === Typescript.SyntaxKind.JsxFragment ? node.closingFragment : node.closingElement;\r\n        var openingPositions = calcPosition(openingNode, lines).positions;\r\n        var closingPositions = calcPosition(closingNode, lines).positions;\r\n        // <div> => \"<\"\r\n        classifications.push({\r\n            start: openingPositions[0],\r\n            end: openingPositions[0],\r\n            tokens: [JsxToken.angleBracket, orderToken]\r\n        });\r\n        // <div> => \">\"\r\n        classifications.push({\r\n            start: openingPositions[1],\r\n            end: openingPositions[1],\r\n            tokens: [JsxToken.angleBracket, orderToken]\r\n        });\r\n        // </div> => \"</\"\r\n        classifications.push({\r\n            start: closingPositions[0],\r\n            end: __assign(__assign({}, closingPositions[0]), { column: closingPositions[0].column + 1 }),\r\n            tokens: [JsxToken.angleBracket, orderToken]\r\n        });\r\n        // </div> => \">\"\r\n        classifications.push({\r\n            start: closingPositions[1],\r\n            end: closingPositions[1],\r\n            tokens: [JsxToken.angleBracket, orderToken]\r\n        });\r\n        // <div> </div> => \"div\"\r\n        if (node.kind === Typescript.SyntaxKind.JsxElement) {\r\n            var openingTagNamePositions = calcPosition(openingNode.tagName, lines).positions;\r\n            var closingTagNamePositions = calcPosition(closingNode.tagName, lines).positions;\r\n            classifications.push({\r\n                start: openingTagNamePositions[0],\r\n                end: openingTagNamePositions[1],\r\n                tokens: [JsxToken.tagName, orderToken]\r\n            });\r\n            classifications.push({\r\n                start: closingTagNamePositions[0],\r\n                end: closingTagNamePositions[1],\r\n                tokens: [JsxToken.tagName, orderToken]\r\n            });\r\n        }\r\n    }\r\n};\n\n/**\r\n * 分析jsx attribute key\r\n * @param data\r\n */\r\nvar disposeJsxAttributeKey = function (data) {\r\n    var node = data.node, lines = data.lines, classifications = data.classifications;\r\n    var positions = calcPosition(node, lines).positions;\r\n    classifications.push({\r\n        start: positions[0],\r\n        end: positions[1],\r\n        tokens: [JsxToken.attributeKey]\r\n    });\r\n};\n\nvar disposeJsxExpression = function (data) {\r\n    var node = data.node, lines = data.lines, classifications = data.classifications;\r\n    var positions = calcPosition(node, lines).positions;\r\n    // className={`666`} => \"{\"\r\n    classifications.push({\r\n        start: positions[0],\r\n        end: positions[0],\r\n        tokens: [JsxToken.expressionBraces]\r\n    });\r\n    // className={`666`} => \"}\"\r\n    classifications.push({\r\n        start: positions[1],\r\n        end: positions[1],\r\n        tokens: [JsxToken.expressionBraces]\r\n    });\r\n};\n\nvar disposeJsxText = function (data) {\r\n    var node = data.node, lines = data.lines, classifications = data.classifications;\r\n    var positions = calcPosition(node, lines).positions;\r\n    classifications.push({\r\n        start: positions[0],\r\n        end: positions[1],\r\n        tokens: [JsxToken.text]\r\n    });\r\n};\n\nvar disposeNode = function (data) {\r\n    var node = data.node, index = data.index;\r\n    // 寻找到 jsx element or fragment 节点\r\n    if ([\r\n        Typescript.SyntaxKind.JsxFragment,\r\n        Typescript.SyntaxKind.JsxElement,\r\n        Typescript.SyntaxKind.JsxSelfClosingElement\r\n    ].includes(node.kind)) {\r\n        disposeJsxElementOrFragment(data);\r\n    }\r\n    Typescript.SyntaxKind[node.kind];\r\n    // jsx attribute key\r\n    if (node.parent &&\r\n        node.parent.kind === Typescript.SyntaxKind.JsxAttribute &&\r\n        node.kind === Typescript.SyntaxKind.Identifier &&\r\n        index === 0) {\r\n        disposeJsxAttributeKey(data);\r\n    }\r\n    // jsx expression\r\n    if (node.kind === Typescript.SyntaxKind.JsxExpression) {\r\n        disposeJsxExpression(data);\r\n    }\r\n    if (node.kind === Typescript.SyntaxKind.JsxText) {\r\n        disposeJsxText(data);\r\n    }\r\n};\r\nvar walkAST = function (data) {\r\n    disposeNode(data);\r\n    var counter = 0;\r\n    Typescript.forEachChild(data.node, function (child) {\r\n        return walkAST(__assign(__assign({}, data), { node: child, index: counter++ }));\r\n    });\r\n};\r\nvar withDefaultConfig = function (config) {\r\n    var _a = (config || {}).jsxTagCycle, jsxTagCycle = _a === void 0 ? 3 : _a;\r\n    return {\r\n        jsxTagCycle: jsxTagCycle\r\n    };\r\n};\r\nvar analysisTsx = function (filePath, code, config) {\r\n    try {\r\n        var classifications = [];\r\n        var sourceFile = Typescript.createSourceFile(filePath, code, Typescript.ScriptTarget.ES2020, true);\r\n        // 切割分析每一行的长度\r\n        var lines = code.split('\\n').map(function (line) { return line.length + 1; });\r\n        walkAST({\r\n            node: sourceFile,\r\n            lines: lines,\r\n            context: { jsxTagOrder: 1 },\r\n            classifications: classifications,\r\n            config: withDefaultConfig(config),\r\n            index: 0\r\n        });\r\n        return classifications;\r\n    }\r\n    catch (e) {\r\n        // 根据配置打印错误\r\n        if (config && config.enableConsole) {\r\n            console.error(e);\r\n        }\r\n        return [];\r\n    }\r\n};\r\n// Respond to message from parent thread\r\nself.addEventListener('message', function (event) {\r\n    var _a = event.data, code = _a.code, filePath = _a.filePath, version = _a.version, config = _a.config;\r\n    try {\r\n        var result = analysisTsx(filePath, code, config);\r\n        self.postMessage({ classifications: result, version: version, filePath: filePath });\r\n    }\r\n    catch (e) {\r\n        // 根据配置打印错误\r\n        if (config && config.enableConsole) {\r\n            console.error(e);\r\n        }\r\n    }\r\n});\n"}